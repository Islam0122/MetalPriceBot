import base64
import json
import os
import uuid
from io import BytesIO

import requests
from aiogram import Bot, types
from dotenv import load_dotenv, find_dotenv
from requests.auth import HTTPBasicAuth

load_dotenv(find_dotenv())

CLIENT_ID = os.getenv('CLIENT_ID')
SECRET = os.getenv('SECRET')


def get_access_token() -> str:
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': str(uuid.uuid4()),  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
    }
    payload = {"scope": "GIGACHAT_API_PERS"}

    try:
        res = requests.post(
            url=url,
            headers=headers,
            auth=HTTPBasicAuth(CLIENT_ID, SECRET),
            data=payload,
            verify=False,  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ verify=False –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Å—Ä–µ–¥—ã
        )
        res.raise_for_status()  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
        access_token = res.json().get("access_token")
        if not access_token:
            raise ValueError("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω.")
        return access_token
    except requests.RequestException as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ access token:", e)
        return None



def send_prompt(msg: str, access_token: str):
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    payload = json.dumps({
        "model": "GigaChat",
        "messages": [
            {
                "role": "user",
                "content": msg,
            }
        ],
    })
    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': f'Bearer {access_token}'
    }

    try:
        response = requests.post(url, headers=headers, data=payload, verify=False)
        response.raise_for_status()  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
        return response.json()["choices"][0]["message"]["content"]
    except requests.RequestException as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat API:", e)
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat."


def sent_prompt_and_get_response(msg: str, data):
    access_token = get_access_token()

    if access_token:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        prompt = (
            f"–¢—ã ‚Äî metalpricebot, –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –ø—Ä–æ–¥–∞–∂–µ–π –º–µ—Ç–∞–ª–ª–æ–≤. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å: {msg}. "
            "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏, –∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–ª–æ—Å—å –≤ –≤–∏–¥—É. "
            "–ü–æ–¥–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, "
            "–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É–∫–∞–∂–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ) –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç. "
            "–ü—Ä–∏–º–µ—Ä: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ 1: –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∞'. –ù–µ —É–ø–æ–º–∏–Ω–∞–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä."
        )
        for supplier in data:

            prompt += f"- {supplier.title}: {supplier.site_url}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
        response = send_prompt(prompt, access_token)

        # –£–∫—Ä–∞—à–∞–µ–º –æ—Ç–≤–µ—Ç
        decorated_response = f'‚ú®üåü {response} üåàüßö‚Äç‚ôÇÔ∏è'
        return decorated_response
    else:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token."




