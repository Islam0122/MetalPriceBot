import asyncio
from aiogram import F, Router, types, Bot
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import orm_get_suppliers, orm_get_supplier_by_id
from filter.chat_types import ChatTypeFilter
from handlers.ai_function import sent_prompt_and_get_response
from handlers.user_panel.start_functions import welcome_text
from keyboard.inline import get_cancel_keyboard, start_functions_keyboard

find_supplier_private_router = Router()
find_supplier_private_router.message.filter(ChatTypeFilter(['private']))


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AiAssistanceState(StatesGroup):
    WaitingForReview = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
@find_supplier_private_router.callback_query(F.data == "find_supplier")
async def find_supplier_callback_query(query: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    m = await query.message.edit_caption(
        caption="‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å. –Ø –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤! üîç",
        reply_markup=get_cancel_keyboard()
    )
    await state.update_data(message_id=m.message_id)
    await query.answer("–ñ–¥—É –≤–∞—à –∑–∞–ø—Ä–æ—Å! üìù")
    await state.set_state(AiAssistanceState.WaitingForReview)


@find_supplier_private_router.callback_query(F.data.startswith("find_supplier2"))
async def find_supplier__callback_query(query: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    m = await query.message.answer_photo(
        photo=types.FSInputFile('media/img.png'),
        caption="‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å. –Ø –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤! üîç",
        reply_markup=get_cancel_keyboard()
    )
    await state.update_data(message_id=m.message_id)
    await query.answer("–ñ–¥—É –≤–∞—à –∑–∞–ø—Ä–æ—Å! üìù")
    await state.set_state(AiAssistanceState.WaitingForReview)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@find_supplier_private_router.message(AiAssistanceState.WaitingForReview)
async def find_supplier_help_request(message: types.Message, state: FSMContext, bot: Bot,session: AsyncSession):
    user_info = message.from_user.first_name or ""
    if message.from_user.last_name:
        user_info += f" {message.from_user.last_name}"
    if message.from_user.username:
        user_info += f" (@{message.from_user.username})"

    if message.text:
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        processing_message = await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø—Ä–æ—Å, {user_info}!\n"
            "‚è≥ –ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è ‚Äî —è –∏—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –≤–∞—Å..."
        )

        try:
            data = await orm_get_suppliers(session)
            generated_help = sent_prompt_and_get_response(message.text, data)
        except Exception as e:
            generated_help = (
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. üí¨"
            )
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start_'),
            InlineKeyboardButton(text='üîÑ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', callback_data='find_supplier2')
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.edit_message_text(
            chat_id=processing_message.chat.id,
            message_id=processing_message.message_id,
            text=f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n\n{generated_help}",
            reply_markup=keyboard.adjust(1).as_markup(),
            parse_mode=ParseMode.MARKDOWN
        )

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        user_data = await state.get_data()
        message_id = user_data.get("message_id")

        if message_id:
            try:
                await bot.delete_message(message.chat.id, message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ, –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–∞
        await message.reply(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–º–æ—á—å –≤–∞–º. üôè"
        )


@find_supplier_private_router.callback_query(F.data == "cancel")
async def cancel(query: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await query.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if query.message.photo:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        await query.message.edit_caption(
            caption=welcome_text,
            reply_markup=start_functions_keyboard()
        )
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await query.message.edit_text(
            text=welcome_text,
            reply_markup=start_functions_keyboard()
        )


@find_supplier_private_router.callback_query(F.data == "find_supplier_by_city")
async def find_supplier_by_city_callback_query(query: types.CallbackQuery, state: FSMContext,
                                               session: AsyncSession) -> None:
    await state.clear()
    suppliers = await orm_get_suppliers(session)
    builder = InlineKeyboardBuilder()
    for supplier in suppliers:
        builder.add(
            InlineKeyboardButton(text=supplier.address, callback_data=f"city_{supplier.id}")
        )
    builder.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
    await query.message.edit_caption(
        caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±–ª–∏–∂–µ.",
        reply_markup=builder.adjust(1).as_markup()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await query.answer("–ñ–¥—É –≤–∞—à –∑–∞–ø—Ä–æ—Å! üìù")


@find_supplier_private_router.callback_query(F.data.startswith("city_"))
async def find_supplier_by_city_info_callback_query(query: types.CallbackQuery, state: FSMContext,
                                                    session: AsyncSession) -> None:
    # –ò–∑–≤–ª–µ–∫–∞–µ–º id –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ callback_data
    supplier_id = int(query.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
    supplier = await orm_get_supplier_by_id(session, supplier_id=supplier_id)

    if supplier:
        builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Å–∞–π—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "https://"
        if supplier.site_url and supplier.site_url.startswith("https://"):
            builder.add(InlineKeyboardButton(text=supplier.title, url=supplier.site_url))

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        builder.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))

        supplier_info = (
            f"‚ú® –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤–∞–º –ø–æ–º–æ—á—å —Å –ø–æ–∫—É–ø–∫–æ–π! ‚ú®\n\n"
            f"üõ† **–ü–æ—Å—Ç–∞–≤—â–∏–∫**: {supplier.title}\n"
            f"üìç **–ê–¥—Ä–µ—Å**: {supplier.address}\n"
            f"üåê **–°–∞–π—Ç**: {supplier.site_url if supplier.site_url else '–ù–µ—Ç —Å–∞–π—Ç–∞'}\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
        )

        await query.message.edit_caption(
            caption=supplier_info,
            reply_markup=builder.adjust(1).as_markup() ,
            parse_mode=ParseMode.MARKDOWN
        )
        await query.answer("–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ! üìë")
    else:
        await query.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

