from aiogram import F, types, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import get_admins, get_admin, get_admin_by_id, remove_admin, orm_add_admin, orm_add_supplier, \
    orm_get_suppliers, orm_get_supplier_by_id, orm_delete_supplier, get_total_users, get_total_admins, \
    get_total_suppliers
from filter.chat_types import ChatTypeFilter
from keyboard.inline import start_admin_inline_keyboard, return_admin_panel_functions_keyboard, get_cancel_keyboard

admin_private_router = Router()
admin_private_router.message.filter(ChatTypeFilter(["private"]))

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
admin_message = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üåü"
)


@admin_private_router.message(Command("start_admin"))
async def start_cmd(message: types.Message, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users = await get_admins(session)
    admin = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if admin in users:
        keyboard = start_admin_inline_keyboard()
        await message.answer_photo(
            photo=types.FSInputFile('media/img.png'),
            caption=f"{admin_message} \n"
                    f"{message.from_user.full_name}! üòä",
            reply_markup=keyboard
        )
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")


@admin_private_router.callback_query((F.data.startswith('start_admin')))
async def start_command_callback_query(query: types.CallbackQuery, session: AsyncSession) -> None:
    try:
        user_id = query.from_user.id
        admins = await get_admins(session)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã

        if user_id not in admins:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return

        keyboard = start_admin_inline_keyboard()

        await query.message.edit_caption(
            caption=f"{admin_message}",
            reply_markup=keyboard
        )
    except Exception as e:
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@admin_private_router.callback_query((F.data == 'list_admins'))
async def bot_list_admins_callback_query(query: types.CallbackQuery, session: AsyncSession) -> None:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        user_id = query.from_user.id
        admins = await get_admins(session)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã

        if user_id not in admins:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return

        users = await get_admin(session)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        keyboard = InlineKeyboardBuilder()

        if users:
            for user in users:
                keyboard.add(InlineKeyboardButton(text=user.name, callback_data=f"admin_{user.user_id}"))
            keyboard.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_admin"))
        else:
            await query.answer("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.", show_alert=True)
            return

        if not query.message or not query.message.photo:
            await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
            return

        await query.message.edit_caption(
            caption="–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:",
            reply_markup=keyboard.adjust(1).as_markup()
        )
    except Exception as e:
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@admin_private_router.callback_query((F.data.startswith('admin_')))
async def info_callback_query(query: types.CallbackQuery, session: AsyncSession) -> None:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        user_id = query.from_user.id
        admins = await get_admins(session)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã

        if user_id not in admins:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if not query.data or len(query.data.split('_')) < 2:
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
            return

        admin_id = int(query.data.split('_')[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ callback_data
        admin = await get_admin_by_id(session, admin_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        if admin:
            admin_message = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–¥–º–∏–Ω–µ:\n" \
                            f"–ò–º—è: {admin.name}\n" \
                            f"Username: {admin.username}\n" \
                            f"ID: {admin.user_id}\n"

            keyboard = InlineKeyboardBuilder()
            keyboard.add(
                InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data=f"delete_admin_{admin.user_id}"))
            keyboard.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_admin"))

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–æ–∂–Ω–æ –ª–∏ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            if not query.message or not query.message.photo:
                await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
                return

            await query.message.edit_caption(
                caption=admin_message,
                reply_markup=keyboard.adjust(1, 1).as_markup()
            )
        else:
            await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.", show_alert=True)
    except ValueError:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
    except Exception as e:
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@admin_private_router.callback_query((F.data.startswith('delete_admin_')))
async def delete_admin_callback_query(query: types.CallbackQuery, session: AsyncSession) -> None:
    try:
        user_id = query.from_user.id
        admins = await get_admins(session)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã

        if user_id not in admins:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ callback_data
        admin_id = int(query.data.split('_')[2])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–¥–∞–ª—è–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if query.from_user.id == admin_id:
            await query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        admin = await get_admin_by_id(session, admin_id)
        if not admin:
            await query.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await remove_admin(session, admin_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.edit_caption(
            caption=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin.name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        )

    except ValueError:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
    except Exception as e:
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@admin_private_router.callback_query(F.data == "add_admin")
async def add_admin_info_bot(query: types.CallbackQuery, session: AsyncSession) -> None:
    user_id = query.from_user.id
    admins = await get_admins(session)

    if user_id not in admins:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    await query.message.edit_caption(
        caption=(
            "üîπ –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞? üîπ\n\n"
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "/add_admin telegram_id name username\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/add_admin 123456789 JohnDoe johndoe123\n\n"
            "üîë –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å telegram_id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞? üîë\n"
            "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º @UserInfoToBot.\n"
            "2. –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –µ–º—É –µ–≥–æ telegram_id.\n"
            "3. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π telegram_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
            "üí° –í–∞–∂–Ω–æ! –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è telegram_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ —Ç–∞–∫–∂–µ –∏–º—è –∏ username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        ),
        reply_markup=return_admin_panel_functions_keyboard(),
    )


@admin_private_router.message(F.text.startswith("/add_admin"))
async def add_admin(message: types.Message, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /add_admin
        parts = message.text.split()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        if len(parts) != 4:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_admin telegram_id name username")
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        user_id_str, name, username = parts[1], parts[2], parts[3]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ telegram_id - —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            user_id = int(user_id_str)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram_id. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è name –∏ username
        if not name or not username:
            await message.answer("–ò–º—è –∏ username –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        sender_id = message.from_user.id
        admins = await get_admins(session)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        if sender_id not in admins:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        existing_admin = await get_admin_by_id(session, user_id)

        if existing_admin:
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
            existing_admin.is_admin = True
            await session.commit()
            await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ–≥–æ —Å—Ç–∞—Ç—É—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.")
        else:
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
            await orm_add_admin(session, user_id, name, username)
            await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


class SupplierForm(StatesGroup):
    waiting_for_name = State()  # –û–∂–∏–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    waiting_for_site_url = State()  # –û–∂–∏–¥–∞–µ–º URL —Å–∞–π—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞


@admin_private_router.callback_query(F.data == "add_supplier")
async def add_supplier_start(query: types.CallbackQuery, session: AsyncSession, state: FSMContext) -> None:
    user_id = query.from_user.id
    admins = await get_admins(session)

    if user_id not in admins:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    await state.set_state(SupplierForm.waiting_for_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(message_id=query.message.message_id)

    await query.message.edit_caption(
        caption="üîπ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞** üîπ\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.",
        reply_markup=get_cancel_keyboard()
    )


@admin_private_router.message(SupplierForm.waiting_for_name)
async def process_supplier_name(message: types.Message, state: FSMContext) -> None:
    supplier_name = message.text.strip()

    if not supplier_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(supplier_name=supplier_name)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_data = await state.get_data()
    message_id = user_data.get('message_id')
    if message_id:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=message_id)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (–æ–∂–∏–¥–∞–µ–º URL —Å–∞–π—Ç–∞)
    await state.set_state(SupplierForm.waiting_for_site_url)
    m = await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.", reply_markup=get_cancel_keyboard())
    await state.update_data(message_id=m.message_id)
    await message.delete()


@admin_private_router.message(SupplierForm.waiting_for_site_url)
async def process_supplier_site_url(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    site_url = message.text.strip()

    if not site_url:
        await message.answer("URL —Å–∞–π—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    supplier_name = user_data.get('supplier_name')

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await orm_add_supplier(session, supplier_name, site_url)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_id = user_data.get('message_id')
    if message_id:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=message_id)


    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    await message.answer(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ '{supplier_name}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", parse_mode=ParseMode.MARKDOWN,reply_markup=return_admin_panel_functions_keyboard())
    await message.delete()


@admin_private_router.callback_query(F.data == 'all_suppliers')
async def bot_all_suppliers_callback_query(query: types.CallbackQuery, session: AsyncSession) -> None:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        user_id = query.from_user.id
        admins = await get_admins(session)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã

        if user_id not in admins:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return

        suppliers = await orm_get_suppliers(session)
        keyboard = InlineKeyboardBuilder()

        if suppliers:
            for i in suppliers:
                keyboard.add(InlineKeyboardButton(text=i.title, callback_data=f"suppliers_{i.id}"))
            keyboard.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_admin"))
        else:
            await query.answer("–ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.", show_alert=True)
            return

        if not query.message:
            await query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
            return

        # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        if query.message.photo:
            await query.message.edit_caption(
                caption="–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:",
                reply_markup=keyboard.adjust(1).as_markup()
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await query.message.edit_text(
                text="–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:",
                reply_markup=keyboard.adjust(1).as_markup()
            )
    except Exception as e:
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@admin_private_router.callback_query(F.data.startswith('suppliers_'))
async def suppliers_info_callback_query(query: types.CallbackQuery, session: AsyncSession) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_id = query.from_user.id
    admins = await get_admins(session)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã

    if user_id not in admins:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ callback_data
    supplier_id = query.data.split('_')[1]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    supplier = await orm_get_supplier_by_id(session, supplier_id)

    if supplier:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", callback_data=f"delete_supplier_{supplier.id}")
        )
        keyboard.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_admin"))

        # –û–±–Ω–æ–≤–ª—è–µ–º caption —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
        await query.message.edit_caption(
            caption=f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.title}\n–°–∞–π—Ç: {supplier.site_url}\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {supplier.created}\n–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {supplier.updated}",
            reply_markup=keyboard.adjust(1).as_markup()
        )
    else:
        await query.answer("–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


@admin_private_router.callback_query(F.data.startswith('delete_supplier_'))
async def delete_supplier_callback_query(query: types.CallbackQuery, session: AsyncSession) -> None:
        user_id = query.from_user.id
        admins = await get_admins(session)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã

        if user_id not in admins:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ callback_data
        supplier_id = query.data.split('_')[2]

        # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await orm_delete_supplier(session, supplier_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await query.message.edit_caption(
            caption="–ü–æ—Å—Ç–∞–≤—â–∏–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardBuilder().add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_admin")).as_markup()
        )
        await query.answer("–ü–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", show_alert=True)


async def get_statistics(session: AsyncSession) -> str:
    total_users = await get_total_users(session)
    total_admins = await get_total_admins(session)
    total_suppliers = await get_total_suppliers(session)

    return (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {total_admins}\n"
        f"- –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {total_suppliers}\n"
    )

@admin_private_router.callback_query(F.data == "bot_statistics")
async def bot_statistics_info_bot(query: types.CallbackQuery, session: AsyncSession) -> None:
    user_id = query.from_user.id
    admins = await get_admins(session)

    if user_id not in admins:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    statistics_text = await get_statistics(session)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await query.message.edit_caption(
        caption=statistics_text,
        reply_markup=return_admin_panel_functions_keyboard(),
    )

